function updateOutput(input) {
    console.log(input.value);
}
function loadExampleIntoInput(input) {
    input.value = exampleFile;
    console.log(input.value);
}
var exampleFile = "# Mozzie's Markdown Demo\n\nMarkdown is a pretty simple format --- or, it *started* as a simple format, and quickly grew out of control.  I will attempt (and fail) to be brief but thorough as I explain how it is implemented here.\n\nAs I parse it, markdown consists of \"blocks\" separated by empty lines, like this:\n\n````md\n# Section Header\n\nParagraph paragraph paragraph.\n\n- List\n- List\n- List\n\n```js\nconsole.log('code');\n```\n````\n\nEach block represents something like a paragraph, a quote, block of code, etc.\n\nWithin these blocks is text that contains \"markup\", like *italics*, **boldface**, ^^smallcaps^^, `code`, and more.\n\n## Blocks\n\nThere are seven blocks I recognize here:\n\n1.  [Paragraphs](#p).\n2.  [Headers](#hx).\n3.  [Definition lists](#dl).\n4.  [Lists (Ordered and Unordered)](#li).\n5.  [Block quotes](#blockquote).\n6.  [Code blocks](#pre).\n7.  [Context breaks](#hr).\n\n[Paragraphs]{id=\"p\"}\n: The \"standard unit\" of text.  The default type of block; simply seperate them with blank lines.\n\n```md\nfirst paragraph\n\nsecond paragraph\nthat is a little\nlonger\n\nthird paragraph\n```\n\n---\n\n[Headers]{id=\"hx\"}\n: Used for section and document titles.  Begin them with `#`s; the more hashes the smaller the header.\n\n```md\n# h1\n\n## h2\n\n### h3\n\n...\n\n###### h6\n```\n\n---\n\n[Definition lists]{id=\"dl\"}\n: Useful for defining terms, or for lists of \"key / value\" pairs.  Follow the \"key\" with the \"value\" preceded by a colon on a seperate line.\n\n```md\npoika\n: boy\n\nmies\n: man\n\nboksi\n: box\n\npoikamies\n: bachelor\n\npoikamiesboksi\n: bachelor box\n: an apartment inhabited by a single adult man\n```\n\n---\n\n[Lists]{id=\"li\"}\n: Unordered lists --- \"bullet points\" --- can be made by starting lines with dashes or asterisks.\n: Ordered lists can be made by starting lines with numbers --- the specific numbers don't matter, the program will number them automatically.\n\n```md\n- unordered\n- unordered\n  - unordered\n  - unordered\n    - unordered\n- unordered\n\n1.  ordered\n1.  ordered\n  1.  ordered\n  1.  ordered\n1.  ordered\n1.  ordered\n```\n\n---\n\n[Block quotes]{id=\"blockquote\"}\n: Used to quote large amounts of text.  Precede each line with `>`.\n\n```md\n> I was on the Apollo 11 spacecraft.\n> I have sailed the seven seas.\n> I have lived a thousand lives,\n> and through it all, I have seen\n> the Truth.  And the Truth is crypto.\n> Invest now.\n```\n\n---\n\n[Code blocks]{id=\"pre\"}\n: Used to display large amounts of code.  Open one by typing a number of backticks greater than two on a line, and close it with the same number of backticks.\n\n````md\n```haskell\nqSort :: (Ord a) => [a] -> [a]\nqSort [] = []\nqSort (x:xs) =\n    let less = qSort $ filter (<= x) xs\n        more = qSort $ filter (> x)  xs\n    in  less ++ [x] ++ more\n```\n````\n\n---\n\n[Context breaks]{id=\"hr\"}\n: Used to separate the document into different contexts.  Signal one with a line that contains nothing but three or more dashes.\n\n```md\none context\n\n---\n\nanother context\n```\n\n## Markup\n";
